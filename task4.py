# -*- coding: utf-8 -*-
"""TASK4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pw_j4UJyLwFu31r613n0RBKLhBFQWK0s
"""

import pandas as pd

df = pd.read_csv("/content/Dataset .csv")
df.head(2)

df.columns

import pandas as pd
import folium
import matplotlib.pyplot as plt
import seaborn as sns
from folium.plugins import HeatMap
from geopy.geocoders import Nominatim


#TO FIND RESTUARANT HUBS USING GEOLOCATION
df = pd.read_csv("/content/Dataset .csv")


if 'Latitude' in df.columns and 'Longitude' in df.columns:
    print("Latitude and Longitude columns found. Proceeding with mapping.")
else:
    raise ValueError("Dataset does not contain 'latitude' and 'longitude' columns.")
df = df.dropna(subset=['Latitude', 'Longitude'])

map_center = [df["Latitude"].mean(), df["Longitude"].mean()]
restaurant_map = folium.Map(location=map_center, zoom_start=10)
for _, row in df.iterrows():
    folium.Marker(
        location=[row["Latitude"], row["Longitude"]],
        popup=f"Restaurant: {row['Restaurant Name']}\nCuisine: {row['Cuisines']}",
        icon=folium.Icon(color="blue", icon="info-sign")
    ).add_to(restaurant_map)

restaurant_map.save("restaurant_distribution_map.html")
print("Restaurant distribution map saved as 'restaurant_distribution_map.html'.")

if "City" in df.columns:
    city_grouped = df.groupby("City").agg(
        total_restaurants=("Restaurant Name", "count"),
        avg_rating=("Aggregate rating", "mean"),
        avg_price=("Price range", "mean")
    ).reset_index()
else:
    raise ValueError("Dataset does not contain 'City' column.")

top_cities = city_grouped.sort_values(by="total_restaurants", ascending=False).head(10)

plt.figure(figsize=(12, 6))
sns.barplot(x="total_restaurants", y="City", data=top_cities, palette="coolwarm")
plt.xlabel("Number of Restaurants")
plt.ylabel("City")
plt.title("Top 10 Cities with Highest Restaurant Count")
plt.show()

heatmap_data = df[["Latitude", "Longitude"]].values.tolist()

heatmap_map = folium.Map(location=map_center, zoom_start=10)
HeatMap(heatmap_data, radius=10).add_to(heatmap_map)
heatmap_map.save("restaurant_heatmap.html")
print("Restaurant heatmap saved as 'restaurant_heatmap.html'.")

print("\nInteresting Insights:")
top_cities_highest_rated = city_grouped.sort_values(by="avg_rating", ascending=False).head(5)
print("Top 5 cities with highest average restaurant ratings:\n", top_cities_highest_rated)

top_cities_most_expensive = city_grouped.sort_values(by="avg_price", ascending=False).head(5)
print("Top 5 most expensive cities for restaurants:\n", top_cities_most_expensive)

print(df["City"].value_counts().head(20))
print(df[["Latitude", "Longitude"]].describe())

import pandas as pd
import numpy as np
import folium
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler
from folium.plugins import HeatMap
from google.colab import files

if "Latitude" not in df.columns or "Longitude" not in df.columns:
    raise ValueError("Dataset must contain 'Latitude' and 'Longitude' columns.")

df = df.dropna(subset=["Latitude", "Longitude"])  # Remove missing values

map_center = [df["Latitude"].mean(), df["Longitude"].mean()]
restaurant_map = folium.Map(location=map_center, zoom_start=3)  # Global zoom

heatmap_data = df[["Latitude", "Longitude"]].values.tolist()
HeatMap(heatmap_data, radius=10).add_to(restaurant_map)
restaurant_map.save("restaurant_heatmap_global.html")
print("Global restaurant heatmap saved as 'restaurant_heatmap_global.html'.")
city_grouped = df.groupby("City").agg(
    total_restaurants=("Restaurant Name", "count"),
    avg_rating=("Aggregate rating", "mean"),
    avg_price=("Price range", "mean")
).reset_index()


top_cities = city_grouped.sort_values(by="total_restaurants", ascending=False).head(10)
plt.figure(figsize=(12, 6))
sns.barplot(x="total_restaurants", y="City", data=top_cities, palette="coolwarm")
plt.xlabel("Number of Restaurants")
plt.ylabel("City")
plt.title("Top 10 Cities with Highest Restaurant Count (Global)")
plt.xticks(rotation=45)
plt.show()



X = df[["Latitude", "Longitude"]]
X_scaled = StandardScaler().fit_transform(X)  # Normalize coordinates
dbscan = DBSCAN(eps=0.3, min_samples=10)  # Adjusted for global spread
df["cluster"] = dbscan.fit_predict(X_scaled)

plt.figure(figsize=(10, 6))
sns.scatterplot(x=df["Longitude"], y=df["Latitude"], hue=df["cluster"], palette="Set1", alpha=0.8)
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.title("Global Restaurant Clusters Identified by DBSCAN")
plt.legend(title="Cluster")
plt.show()

print("\nInteresting Insights:")
top_cities_highest_rated = city_grouped.sort_values(by="avg_rating", ascending=False).head(5)
print("Top 5 cities with highest average restaurant ratings:\n", top_cities_highest_rated)

top_cities_most_expensive = city_grouped.sort_values(by="avg_price", ascending=False).head(5)
print("Top 5 most expensive cities for restaurants:\n", top_cities_most_expensive)

df.to_csv("restaurant_clusters_global.csv", index=False)
files.download("restaurant_clusters_global.csv")

cluster_10_df = df[df["cluster"] == 10]

if cluster_10_df.empty:
    print("Cluster 10 does not exist in the dataset.")
else:
    cluster_10_summary = {
        "Total Restaurants": cluster_10_df.shape[0],
        "Average Latitude": cluster_10_df["Latitude"].mean(),
        "Average Longitude": cluster_10_df["Longitude"].mean(),
        "Average Rating": cluster_10_df["Aggregate rating"].mean(),
        "Average Price Range": cluster_10_df["Price range"].mean(),
    }

    # **Display Summary Statistics**
    cluster_10_summary_df = pd.DataFrame([cluster_10_summary])
    print("\nCluster 10 Summary:")
    print(cluster_10_summary_df)

    plt.figure(figsize=(10, 6))
    sns.scatterplot(x=df["Longitude"], y=df["Latitude"], hue=df["cluster"], palette="Set1", alpha=0.3)
    sns.scatterplot(x=cluster_10_df["Longitude"], y=cluster_10_df["Latitude"], color="black", label="Cluster 10", edgecolor="white", s=100)
    plt.xlabel("Longitude")
    plt.ylabel("Latitude")
    plt.title("Cluster 10 Geographic Distribution")
    plt.legend(title="Cluster")
    plt.show()

    cluster_10_map = folium.Map(location=[cluster_10_summary["Average Latitude"], cluster_10_summary["Average Longitude"]], zoom_start=5)
    HeatMap(cluster_10_df[["Latitude", "Longitude"]].values.tolist(), radius=10).add_to(cluster_10_map)
    cluster_10_map.save("cluster_10_heatmap.html")
    print("Cluster 10 heatmap saved as 'cluster_10_heatmap.html'.")

    # **Save Cluster 10 Data**
    cluster_10_df.to_csv("cluster_10_data.csv", index=False)
    print("Cluster 10 data saved as 'cluster_10_data.csv'.")
    files.download("cluster_10_heatmap.html")
    files.download("cluster_10_data.csv")